properties

1. javaScript  has only interpreter.
2. javaScript has oops and object based scripting language.
3. javaScript has single call stack.
4. javaScript is weakly typed language.
5. javaScript is case sensitive. 
6. javaScript is synchronous. -> promise 

------------------------------------------------------------------------------------------

javaScript is lightweight; ->  it has only interpreter and no power system is required

------------------------------------------------------------------------------------------

object
1. window (console, document)
2. console -> print statement
3. document -> to write text in browser(document)
4. screen 


console object method
console.log()


document object method
document.write()
document.writeln()



developer of html         ->  tim berners-lee in 1993
developer of css          ->  hakon wium lie in 1996
developer of javascript   ->  brendon hich  in  may 1995


--------------------------------------------------------------------------------------------

what is javascript ->   javascript is a scripting language to write some basic functionality.
(Functionality)


scripting language -> 
1. it is interpreted at runtime instead of compiled
2. it is designed to communicate with other other programming language.

--------------------------------------------------------------------------------------------


html extension ->  .html   or .htm
css extension ->  .css
javascript extension ->  .js 


-----------------------------------------------------------------------------------------------


javascript engine -> 

chrome ->  V8
microsoft edge -> V8
firefox -> spider Monkey
Internet explorer -> chakra
safari -> Js core



----------------------------------------------------------------------------------------

how to write javaScript inside html ->

1. Internal method    

<body>



<script>

</script>
</body>


2. External method 


<body>



<script src="./index.js"></script>
</body>



Note :  script tag should be before body closing tag.


-----------------------------------------------------------------------------------------------
Async and defer 

<script  async  defer></script>

async ->  
1. it executes in the last.
2. both html and  javaScript execute parallelly.


defer-> first html excutes then javaScript 


----------------------------------------------------------------------------------------------

scope ->
1. Global scope  ->  outside of function/method.
2. Local scope ->   inside a function/method.

(Outer Scope -> other than local and global scope (incase of nested function))
Nested function -> a Function inside another function.

----------------------------------------------------------------------------------------------

variable -> variables are the named memory location which is used to store some  data or value and it can be change n no of times during execution.

types of varible -> 
1. var  (global)
2. let  (local, functional, block, script)
3. const  (local, functional, block, script)

variable_type variable_name = value;

var v = 10;   (number)
var v = "Hello";   (string)
var v = true;  (boolean)
var v = undefind;  (undefined)
var v = null;  (null)
var v = 10000n;  (bigint)



var v = NaN;  (nan -> not a number -> number )
NaN = "A"-3 or 10-"F"



Var ->  
1. declaration.  

    variable_type variable_name;
    var a;
    let b;
    const c;  // not possible


2. declaration and initialization.

    variable_type variable_name = value;
    var a = 10;
    let b = 20;
    const c = 30;

3. re-initialization.

    variable_type variable_name = value;
    var a = 10;
    let b = 10;
    const c = 10;

    a = 30; 
    b = 30; 
    c = 30; // not possible 



4. Re-Declaration.

    variable_type variable_name = value;
    var a = 10;
    let b = 30;
    const c = 30;

    var a = 50;  
    let b = 90; //not possible.
    const c = 70; //not possible.

    
-----------------------------------------------------------------------------------------

hoisting  -> utilizing the variable before initialization line.


var a = 10;
console.log(a);


console.log(a);  -> utilizing
var a = 10;  -> initialization 



for let and const  -> hoisting is not possible 
Error -> Reference Error -> TDz -> temporal dead zone -> time gap between utilization and initialization line

------------------------------------------------------------------------------------------

tokens -> tokens are the smallest individual unit of javaScript program.

1. identifier -> name given to the javaScript program
2. keywords -> predefined reserved words which has its own meaning
3. literal -> values which is used to performed some operation.
4. operators -> is a symbol which is used to perform some operation
5. seperator -> used to seperate given code
6. comments -> additional information about javaScript code/program

-------------------------------------------------------------------------------------------
(64 - 16(ES 5/6) = 48)
keywords --> if, else, while, do, for, 

-------------------------------------------------------------------------------------------

literal ->  
1. primitive (6)  -> number, string, boolean, undefind, null, bigint.(immutable, object dereferencing)
2. non primitive (3) -> function, array, object. (mutable, object referencing)


1. Number  -> -1, 0, 1.5
2. String -> "Hello", 'Hello', `Hello` (backtick)

        backtick ->   1. templete string.  (multi line string)
                      2. interpolation.    ${variable_name} (we can write/print variable inside string)

3. Boolean -> 



function ->  (10)
1. ananymous Function
2. named function
3. functional expression
4. first class function
5. arrow function
6. higher order function
7. callback function
8. nested function
9. generator function
10. immediate invoking function


array -> 
1. filter()
2. map()
3. reduce()


object ->
1. date
2. time
3. Math

---------------------------------------------------------------------------------------------